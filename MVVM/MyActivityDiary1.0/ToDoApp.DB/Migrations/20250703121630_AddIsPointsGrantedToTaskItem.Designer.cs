// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToDoApp.DB;

#nullable disable

namespace ToDoApp.DB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250703121630_AddIsPointsGrantedToTaskItem")]
    partial class AddIsPointsGrantedToTaskItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ToDoApp.Core.Models.CalendarDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPlaceholder")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("ToDoApp.Core.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarDayId")
                        .HasColumnType("integer");

                    b.Property<int?>("CalendarDayId1")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPointsGranted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimerRunning")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressCurrentInt")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressMaxInt")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressString")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("RemainingTime")
                        .HasColumnType("interval");

                    b.Property<bool>("ShowProgressFields")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowTimer")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TaskProgress")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarDayId");

                    b.HasIndex("CalendarDayId1");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("ToDoApp.DB.Models.PointsHistoryDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("PointsHistory");
                });

            modelBuilder.Entity("ToDoApp.DB.Models.TaskItemDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPointsGranted")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressCurrentInt")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressMaxInt")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressString")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("RemainingTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TaskProgress")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("ToDoApp.Core.Models.TaskItem", b =>
                {
                    b.HasOne("ToDoApp.Core.Models.CalendarDay", null)
                        .WithMany("Tasks")
                        .HasForeignKey("CalendarDayId");

                    b.HasOne("ToDoApp.Core.Models.CalendarDay", null)
                        .WithMany("TasksSorted")
                        .HasForeignKey("CalendarDayId1");
                });

            modelBuilder.Entity("ToDoApp.DB.Models.PointsHistoryDbModel", b =>
                {
                    b.HasOne("ToDoApp.DB.Models.TaskItemDbModel", "TaskItem")
                        .WithMany()
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("ToDoApp.Core.Models.CalendarDay", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TasksSorted");
                });
#pragma warning restore 612, 618
        }
    }
}
